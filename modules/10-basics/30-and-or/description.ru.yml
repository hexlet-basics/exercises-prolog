---

name: Конъюнкция и дизъюнкция
theory: |
  Так как Prolog – логический язык программирования, он поддерживает различные логические операции. В объектно–ориентированных и функциональных языках программист может просто последовательно вызвать необходимые ему функции. Но в Prolog все выполняемые правила должны быть соединены логическими операторами. Формально: правила в Prolog записываются в форме правил логического вывода с логическими заключениями и списком логических условий. Даже для опытных программистов такая формулировка может быть неочевидной, но в следующих уроках вы подробнее познакомитесь с логическим языком и научитесь писать простые логические операции.

  > Обратите внимание: в дальнейшем мы будем использовать слово предикат, как замену слову правило

  В Prolog существует два встроенных предиката, описывающих конъюнкцию (логическое "И") и дизъюнкцию (логическое "ИЛИ"). Записываются они `,` и `;` соответственно. Т.е. все последовательно применяемые правила должны быть соединены символами `,` ("И") и `;` ("ИЛИ"). Чтобы понять принцип работы давайте рассмотрим пример:

  ```prolog
  :–
    write("Hello, "), write("World!").
  ```

  > Обратите внимание: в ходе отладки вашей программы вы будете сталкиваться с документацией и ошибками. В них можно встретить запись вида `название/число`, например `write/1`. Данная запись означает, что существует предикат с таким `названием`, принимающий `число` аргументов

  В данном примере мы вызываем встроенный предикат `write/1`, чтобы вывести на экран строку 'Hello, '. Далее мы хотим вызвать этот предикат еще раз, чтобы вывести строку 'World!'. Как было описано выше, предикаты должны быть соединены логическими операциями, чтобы вывести какой–либо логический результат.
  Поэтому мы соединяем данные предикаты с помощью логической операции "И" (`,`). Если ввести эти команды в интерпретатор мы получим следующий вывод:

  <pre class='hexlet–basics–output'>
    Hello, World!
    true.
  </pre>

  Фактически операция "И" как бы выполняет функции вместе и дает один результат. Другое название конъюнкции – логическое умножение. Но мы также можем соединить предикаты операцией "ИЛИ" – логическим сложением. В этом случае мы получим следующий вывод:

  <pre class='hexlet–basics–output'>
    Hello,
    true ;
    World!
    true.
  </pre>

  Вместо ожидаемой строки "Hello, World!" мы получили странный вывод, содержащий значения `true`. Что произошло в этом случае? В данном примере операция "ИЛИ" выполнила предикаты отдельно друг от друга.
  Помните, какая задача стоит перед Prolog программой? "Доказать, является ли заданное утверждение следствием из имеющихся фактов и правил". Любое доказательство возвращает "ИСТИНУ" или "ЛОЖЬ".
  В примере выше оба предиката не содержат каких–либо логических условий, их задача – вывести строку, поэтому поэтому каждый из этих предикатов вернул "ИСТИНУ" (`true`).
  Более подробно:

  1. Интерпретатор доказал предикат `write('Hello, ')`. В ходе доказательства была выведена переданная нами в качестве аргумента строка 'Hello, '.
  2. Интерпретатор вывел результат доказательства – `true`
  3. Интерпретатор доказал предикат `write('World!')`. В ходе доказательства была выведена переданная нами в качестве аргумента строка 'World!'.
  2. Интерпретатор вывел результат доказательства – `true`

  > Итоги: в отличие от других языков, задача Prolog – доказать какие–то утверждения на основе уже существующих в программе фактах. Работу программы можно сравнить с доказательством какой–либо теоремы или предположения.

  В следующих уроках вы познакомитесь с фактами и правилами в языке Prolog и научитесь правильно использовать логические операции.

instructions: |
  Повторите пример из урока и выведите на экран следующую строку:

  <pre class='hexlet–basics–output'>
    Hello,
    true ;
    World!
    true.
  </pre>

tips:
  - |
    [Математическая логика](http://mathprofi.ru/osnovy_matematicheskoj_logiki.html)
  - |
    [SWI–Prolog](https://www.swi-prolog.org/)
  - |
    [SWISH](https://swish.swi-prolog.org/)

